#!/usr/bin/env python
import os
import argparse
import sys
import urllib

import requests
import json

from aur_upd import aur_updater

def all():
    print('uapde all------')


def install(name):

    r = json.loads(requests.get('https://aur.archlinux.org/rpc/?v=5&type=search&arg=' + urllib.parse.quote(name)).text)

    if r['resultcount'] > 1:
        cnt =1
        for pac in r['results']:
            print('{} {}'.format(cnt, pac['Name']))
            cnt += 1

        pacNum = int(input("Enter package number: "))

        if pacNum < 1 or pacNum > r['resultcount']:
            print("Bad index")
            return

        print(r['results'][pacNum-1]['Name'])

    else:
        if r['resultcount'] == 0:
            print('Nothing found')
        else:
            print(r['results'][0]['Name'])

if __name__ == '__main__':

    mangle_args = ('install', 'all')
    arguments = ['--' + arg if arg in mangle_args else arg for arg in sys.argv[1:]]

    parser = argparse.ArgumentParser(description='Yet another AUR updater')
    # parser.add_argument('--install', dest='funcs',   action='append_const', const=func3)
    parser.add_argument('--all', dest='funcs',   action='append_const', const=all, help="Full system update include AUR packages")
    parser.add_argument('--install', dest='intall_package_name',   action='store', type=str)

    args = parser.parse_args(arguments)

    if args.intall_package_name:
        print("INSTALL {}".format(args.intall_package_name))
        install(args.intall_package_name)
        exit(0)
    else:
        if args.funcs:
            if all in args.funcs:
                all()
                exit(0)
        print("NO INSTALL - UPDATE")

    sudoPassword = str(input("Enter sudo password:"))

    home = os.path.expanduser("~") + '/.cache/aurupd'
    if not os.path.isdir(home):
        os.mkdir(home)

    os.chdir(home)

    aur = aur_updater.aur_updater()

    list = aur.get_aur_packages()

    for l in list:
        if l == '':
            continue
        name = l.split(' ')[0]
        ver = l.split(' ')[1]

        v = aur.get_package_current_version(name)

        if v != ver and not (v is None):
            if (aur.clone_package(name)) == 0:
                if aur.build_package(name) == 0:
                    aur.install_package(name, sudoPassword)
                    print('[+] ' + name + ' is updated')
                else:
                    print('[X] '+name+' building error')
                    continue
        else:
            if v is None:
                print('[-] ' + name + ' missed in AUR')
            else:
                print('[ ] ' + name + ' is current')
